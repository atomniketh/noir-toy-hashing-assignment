use dep::std;
use dep::u2b;

global PRIME: u32 = 16777619;

fn main(num: u32, hash_value: pub u32) { 
    let calculated_hash_value = calculate_hash(num);
    assert(calculated_hash_value == hash_value);
}

fn calculate_hash(num: u32) -> u32 { 
    let mut hash_value = 0x811C9DC5;
    let primeNum = 16777619;
    let num_array = u2b::u32_to_u8(num);

    for byte in num_array {
        let product = (hash_value * primeNum);
        hash_value = (product) ^ byte as u32;
     }
    hash_value as u32
 }

#[test]
fn test_1() {
    let num = 127561628;
    let hash = calculate_hash(num);
    assert(hash == 0x71233de7);
}

#[test]
fn test_2() {
    let num = 237261828;
    let hash = calculate_hash(num);
    assert(hash == 0x7F51D567);
}

#[test]
fn test_3() {
    let num = 596214892;
    let hash = calculate_hash(num);
    assert(hash == 0x3F0C8995);
}